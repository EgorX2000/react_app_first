{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","GettingWeather","type","name","placeholder","Weather","className","city","country","temp","clouds","pressure","windd","winds","error","APIkey","App","state","undefined","GetWeather","e","a","preventDefault","target","elements","value","fetch","apiURL","json","data","console","log","all","clouds1","wind","deg","setState","main","sys","speed","this","Math","trunc","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.91b259f8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Погода ---></h2>\r\n        <p>Узнайте погоду в вашем городе!</p>\r\n    </div>\r\n)\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.GettingWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n        <button>Найти</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"infoWeath\">\r\n    { props.city &&\r\n        <div>\r\n            <p>Расположение: {props.city}, {props.country}</p>\r\n            <p>Температура: {props.temp}°C</p>\r\n            <p>Облачность: {props.clouds}</p>\r\n            <p>Давление: {props.pressure} мм рт. ст.</p>\r\n            <p>Ветер: {props.windd}, {props.winds} м/с</p>\r\n        </div>\r\n    }   \r\n    <p className=\"error\">{props.error}</p>\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst APIkey = \"4108158e1a1ac40620f94bfd83f37504\";\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        clouds: undefined,\r\n        pressure: undefined,\r\n        winds: undefined,\r\n        error: undefined\r\n    }\r\n\r\n    GetWeather = async (e) => {\r\n        e.preventDefault();\r\n        var city = e.target.elements.city.value;\r\n\r\n        if (city){\r\n            const apiURL = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${APIkey}&units=metric&lang=ru`);\r\n            const data = await apiURL.json();\r\n            console.log(data);\r\n            \r\n            if (city === data.name) {\r\n                if (data.clouds.all<=25) {\r\n                    var clouds1 = \"Ясно\";\r\n                }\r\n\r\n                if (data.clouds.all>25 && data.clouds.all<=50) {\r\n                    clouds1 = \"Переменная облачность\";\r\n                }\r\n\r\n                if (data.clouds.all>50 && data.clouds.all<=75) {\r\n                    clouds1 = \"Облачно\";\r\n                }\r\n\r\n                if (data.clouds.all>75) {\r\n                    clouds1 = \"Пасмурно\";\r\n                }\r\n\r\n                if (data.wind.deg>337.5 && data.wind.deg<=22.5) {\r\n                    var wind = \"С\";\r\n                }\r\n\r\n                if (data.wind.deg>22.5 && data.wind.deg<=67.5) {\r\n                    wind = \"СВ\";\r\n                }\r\n\r\n                if (data.wind.deg>67.5 && data.wind.deg<=112.5) {\r\n                    wind = \"В\";\r\n                }\r\n\r\n                if (data.wind.deg>112.5 && data.wind.deg<=157.5) {\r\n                    wind = \"ЮВ\";\r\n                }\r\n\r\n                if (data.wind.deg>157.5 && data.wind.deg<=202.5) {\r\n                    wind = \"Ю\";\r\n                }\r\n\r\n                if (data.wind.deg>202.5 && data.wind.deg<=247.5) {\r\n                    wind = \"ЮЗ\";\r\n                }\r\n\r\n                if (data.wind.deg>247.5 && data.wind.deg<=292.5) {\r\n                    wind = \"З\";\r\n                }\r\n\r\n                if (data.wind.deg>292.5 && data.wind.deg<=337.5) {\r\n                    wind = \"СЗ\";\r\n                }\r\n\r\n                this.setState({\r\n                    temp: data.main.temp,\r\n                    city: data.name,\r\n                    country: data.sys.country,\r\n                    clouds: clouds1,\r\n                    pressure: data.main.pressure,\r\n                    winds: data.wind.speed,\r\n                    windd: wind,\r\n                    error: undefined\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    temp: undefined,\r\n                    city: undefined,\r\n                    country: undefined,\r\n                    clouds: undefined,\r\n                    pressure: undefined,\r\n                    winds: undefined,\r\n                    error: \"Такого города не существует\"\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({\r\n                temp: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                clouds: undefined,\r\n                pressure: undefined,\r\n                winds: undefined,\r\n                error: \"Введите город\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-5 info\">\r\n                                <Info />\r\n                            </div>\r\n                            <div className=\"col-sm-7 form\">\r\n                                <Form GettingWeather={this.GetWeather} />\r\n                                <Weather \r\n                                    temp = {this.state.temp}\r\n                                    city = {this.state.city}\r\n                                    country = {this.state.country}\r\n                                    clouds = {this.state.clouds}\r\n                                    pressure = {Math.trunc(this.state.pressure*0.750062)}\r\n                                    winds = {this.state.winds}\r\n                                    windd = {this.state.windd}\r\n                                    error = {this.state.error}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}